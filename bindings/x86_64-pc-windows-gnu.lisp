;; Generated by :claw at 2021-09-18T12:01:54.263550Z
(uiop:define-package :%assimp (:use))
(uiop:define-package :aw-assimp-bindings~pristine (:use :cl))
(common-lisp:in-package :aw-assimp-bindings~pristine)

(defparameter %assimp::+aabb-h-inc+ nil)

(defparameter %assimp::+anim-h-inc+ nil)

(defparameter %assimp::+assimp-h-inc+ nil)

(defparameter %assimp::+camera-h-inc+ nil)

(defparameter %assimp::+color4d-h-inc+ nil)

(defparameter %assimp::+color4d-inl-inc+ nil)

(defparameter %assimp::+config-android-jni-assimp-manager-support+ "AI_CONFIG_ANDROID_JNI_ASSIMP_MANAGER_SUPPORT")

(defparameter %assimp::+config-app-scale-key+ "APP_SCALE_FACTOR")

(defparameter %assimp::+config-export-point-clouds+ "EXPORT_POINT_CLOUDS")

(defparameter %assimp::+config-export-xfile-64bit+ "EXPORT_XFILE_64BIT")

(defparameter %assimp::+config-favour-speed+ "FAVOUR_SPEED")

(defparameter %assimp::+config-fbx-convert-to-m+ "AI_CONFIG_FBX_CONVERT_TO_M")

(defparameter %assimp::+config-global-scale-factor-default+ 1.0D0)

(defparameter %assimp::+config-global-scale-factor-key+ "GLOBAL_SCALE_FACTOR")

(defparameter %assimp::+config-glob-measure-time+ "GLOB_MEASURE_TIME")

(defparameter %assimp::+config-h-inc+ nil)

(defparameter %assimp::+config-import-ac-eval-subdivision+ "IMPORT_AC_EVAL_SUBDIVISION")

(defparameter %assimp::+config-import-ac-separate-bfcull+ "IMPORT_AC_SEPARATE_BFCULL")

(defparameter %assimp::+config-import-ase-reconstruct-normals+ "IMPORT_ASE_RECONSTRUCT_NORMALS")

(defparameter %assimp::+config-import-collada-ignore-up-direction+ "IMPORT_COLLADA_IGNORE_UP_DIRECTION")

(defparameter %assimp::+config-import-collada-use-collada-names+ "IMPORT_COLLADA_USE_COLLADA_NAMES")

(defparameter %assimp::+config-import-fbx-embedded-textures-legacy-naming+ "AI_CONFIG_IMPORT_FBX_EMBEDDED_TEXTURES_LEGACY_NAMING")

(defparameter %assimp::+config-import-fbx-optimize-empty-animation-curves+ "IMPORT_FBX_OPTIMIZE_EMPTY_ANIMATION_CURVES")

(defparameter %assimp::+config-import-fbx-preserve-pivots+ "IMPORT_FBX_PRESERVE_PIVOTS")

(defparameter %assimp::+config-import-fbx-read-all-geometry-layers+ "IMPORT_FBX_READ_ALL_GEOMETRY_LAYERS")

(defparameter %assimp::+config-import-fbx-read-all-materials+ "IMPORT_FBX_READ_ALL_MATERIALS")

(defparameter %assimp::+config-import-fbx-read-animations+ "IMPORT_FBX_READ_ANIMATIONS")

(defparameter %assimp::+config-import-fbx-read-cameras+ "IMPORT_FBX_READ_CAMERAS")

(defparameter %assimp::+config-import-fbx-read-lights+ "IMPORT_FBX_READ_LIGHTS")

(defparameter %assimp::+config-import-fbx-read-materials+ "IMPORT_FBX_READ_MATERIALS")

(defparameter %assimp::+config-import-fbx-read-textures+ "IMPORT_FBX_READ_TEXTURES")

(defparameter %assimp::+config-import-fbx-strict-mode+ "IMPORT_FBX_STRICT_MODE")

(defparameter %assimp::+config-import-global-keyframe+ "IMPORT_GLOBAL_KEYFRAME")

(defparameter %assimp::+config-import-ifc-custom-triangulation+ "IMPORT_IFC_CUSTOM_TRIANGULATION")

(defparameter %assimp::+config-import-ifc-cylindrical-tessellation+ "IMPORT_IFC_CYLINDRICAL_TESSELLATION")

(defparameter %assimp::+config-import-ifc-skip-space-representations+ "IMPORT_IFC_SKIP_SPACE_REPRESENTATIONS")

(defparameter %assimp::+config-import-ifc-smoothing-angle+ "IMPORT_IFC_SMOOTHING_ANGLE")

(defparameter %assimp::+config-import-irr-anim-fps+ "IMPORT_IRR_ANIM_FPS")

(defparameter %assimp::+config-import-lwo-one-layer-only+ "IMPORT_LWO_ONE_LAYER_ONLY")

(defparameter %assimp::+config-import-lws-anim-end+ "IMPORT_LWS_ANIM_END")

(defparameter %assimp::+config-import-lws-anim-start+ "IMPORT_LWS_ANIM_START")

(defparameter %assimp::+config-import-md2-keyframe+ "IMPORT_MD2_KEYFRAME")

(defparameter %assimp::+config-import-md3-handle-multipart+ "IMPORT_MD3_HANDLE_MULTIPART")

(defparameter %assimp::+config-import-md3-keyframe+ "IMPORT_MD3_KEYFRAME")

(defparameter %assimp::+config-import-md3-shader-src+ "IMPORT_MD3_SHADER_SRC")

(defparameter %assimp::+config-import-md3-skin-name+ "IMPORT_MD3_SKIN_NAME")

(defparameter %assimp::+config-import-md5-no-anim-autoload+ "IMPORT_MD5_NO_ANIM_AUTOLOAD")

(defparameter %assimp::+config-import-mdc-keyframe+ "IMPORT_MDC_KEYFRAME")

(defparameter %assimp::+config-import-mdl-colormap+ "IMPORT_MDL_COLORMAP")

(defparameter %assimp::+config-import-mdl-keyframe+ "IMPORT_MDL_KEYFRAME")

(defparameter %assimp::+config-import-no-skeleton-meshes+ "IMPORT_NO_SKELETON_MESHES")

(defparameter %assimp::+config-import-ogre-material-file+ "IMPORT_OGRE_MATERIAL_FILE")

(defparameter %assimp::+config-import-ogre-texturetype-from-filename+ "IMPORT_OGRE_TEXTURETYPE_FROM_FILENAME")

(defparameter %assimp::+config-import-remove-empty-bones+ "AI_CONFIG_IMPORT_REMOVE_EMPTY_BONES")

(defparameter %assimp::+config-import-smd-keyframe+ "IMPORT_SMD_KEYFRAME")

(defparameter %assimp::+config-import-smd-load-animation-list+ "IMPORT_SMD_LOAD_ANIMATION_LIST")

(defparameter %assimp::+config-import-ter-make-uvs+ "IMPORT_TER_MAKE_UVS")

(defparameter %assimp::+config-import-unreal-handle-flags+ "UNREAL_HANDLE_FLAGS")

(defparameter %assimp::+config-import-unreal-keyframe+ "IMPORT_UNREAL_KEYFRAME")

(defparameter %assimp::+config-pp-ct-max-smoothing-angle+ "PP_CT_MAX_SMOOTHING_ANGLE")

(defparameter %assimp::+config-pp-ct-texture-channel-index+ "PP_CT_TEXTURE_CHANNEL_INDEX")

(defparameter %assimp::+config-pp-db-all-or-none+ "PP_DB_ALL_OR_NONE")

(defparameter %assimp::+config-pp-db-threshold+ "PP_DB_THRESHOLD")

(defparameter %assimp::+config-pp-fd-checkarea+ "PP_FD_CHECKAREA")

(defparameter %assimp::+config-pp-fd-remove+ "PP_FD_REMOVE")

(defparameter %assimp::+config-pp-fid-anim-accuracy+ "PP_FID_ANIM_ACCURACY")

(defparameter %assimp::+config-pp-fid-ignore-texturecoords+ "PP_FID_IGNORE_TEXTURECOORDS")

(defparameter %assimp::+config-pp-gsn-max-smoothing-angle+ "PP_GSN_MAX_SMOOTHING_ANGLE")

(defparameter %assimp::+config-pp-icl-ptcache-size+ "PP_ICL_PTCACHE_SIZE")

(defparameter %assimp::+config-pp-lbw-max-weights+ "PP_LBW_MAX_WEIGHTS")

(defparameter %assimp::+config-pp-og-exclude-list+ "PP_OG_EXCLUDE_LIST")

(defparameter %assimp::+config-pp-ptv-add-root-transformation+ "PP_PTV_ADD_ROOT_TRANSFORMATION")

(defparameter %assimp::+config-pp-ptv-keep-hierarchy+ "PP_PTV_KEEP_HIERARCHY")

(defparameter %assimp::+config-pp-ptv-normalize+ "PP_PTV_NORMALIZE")

(defparameter %assimp::+config-pp-ptv-root-transformation+ "PP_PTV_ROOT_TRANSFORMATION")

(defparameter %assimp::+config-pp-rrm-exclude-list+ "PP_RRM_EXCLUDE_LIST")

(defparameter %assimp::+config-pp-rvc-flags+ "PP_RVC_FLAGS")

(defparameter %assimp::+config-pp-sbbc-max-bones+ "PP_SBBC_MAX_BONES")

(defparameter %assimp::+config-pp-sbp-remove+ "PP_SBP_REMOVE")

(defparameter %assimp::+config-pp-slm-triangle-limit+ "PP_SLM_TRIANGLE_LIMIT")

(defparameter %assimp::+config-pp-slm-vertex-limit+ "PP_SLM_VERTEX_LIMIT")

(defparameter %assimp::+config-pp-tuv-evaluate+ "PP_TUV_EVALUATE")

(defparameter %assimp::+debone-threshold+ 1.0D0)

(defparameter %assimp::+default-material-name+ "DefaultMaterial")

(defparameter %assimp::+defines-h-inc+ nil)

(defparameter %assimp::+embedded-texname-prefix+ "*")

(defparameter %assimp::+failure+ -1)

(defparameter %assimp::+false+ 0)

(defparameter %assimp::+fileio-h-inc+ nil)

(defparameter %assimp::+force-inline+ nil)

(defparameter %assimp::+importer-desc-h-inc+ nil)

(defparameter %assimp::+import-ifc-default-cylindrical-tessellation+ 32)

(defparameter %assimp::+import-ifc-default-smoothing-angle+ 10.0D0)

(defparameter %assimp::+light-h-inc+ nil)

(defparameter %assimp::+lmw-max-weights+ 4)

(defparameter %assimp::+material-h-inc+ nil)

(defparameter %assimp::+math-half-pi+ 1.5707963267948966D0)

(defparameter %assimp::+math-half-pi-f+ 1.5707963705062866D0)

(defparameter %assimp::+math-pi+ 3.141592653589793D0)

(defparameter %assimp::+math-pi-f+ 3.1415927410125732D0)

(defparameter %assimp::+math-two-pi+ 6.283185307179586D0)

(defparameter %assimp::+math-two-pi-f+ 6.2831854820251465D0)

(defparameter %assimp::+matkey-blend-func+ "$mat.blend")

(defparameter %assimp::+matkey-bumpscaling+ "$mat.bumpscaling")

(defparameter %assimp::+matkey-color-ambient+ "$clr.ambient")

(defparameter %assimp::+matkey-color-diffuse+ "$clr.diffuse")

(defparameter %assimp::+matkey-color-emissive+ "$clr.emissive")

(defparameter %assimp::+matkey-color-reflective+ "$clr.reflective")

(defparameter %assimp::+matkey-color-specular+ "$clr.specular")

(defparameter %assimp::+matkey-color-transparent+ "$clr.transparent")

(defparameter %assimp::+matkey-enable-wireframe+ "$mat.wireframe")

(defparameter %assimp::+matkey-global-background-image+ "?bg.global")

(defparameter %assimp::+matkey-global-shaderlang+ "?sh.lang")

(defparameter %assimp::+matkey-name+ "?mat.name")

(defparameter %assimp::+matkey-opacity+ "$mat.opacity")

(defparameter %assimp::+matkey-reflectivity+ "$mat.reflectivity")

(defparameter %assimp::+matkey-refracti+ "$mat.refracti")

(defparameter %assimp::+matkey-shader-compute+ "?sh.cs")

(defparameter %assimp::+matkey-shader-fragment+ "?sh.fs")

(defparameter %assimp::+matkey-shader-geo+ "?sh.gs")

(defparameter %assimp::+matkey-shader-primitive+ "?sh.ps")

(defparameter %assimp::+matkey-shader-tesselation+ "?sh.ts")

(defparameter %assimp::+matkey-shader-vertex+ "?sh.vs")

(defparameter %assimp::+matkey-shading-model+ "$mat.shadingm")

(defparameter %assimp::+matkey-shininess+ "$mat.shininess")

(defparameter %assimp::+matkey-shininess-strength+ "$mat.shinpercent")

(defparameter %assimp::+matkey-transparencyfactor+ "$mat.transparencyfactor")

(defparameter %assimp::+matkey-twosided+ "$mat.twosided")

(defparameter %assimp::+matrix3x3-h-inc+ nil)

(defparameter %assimp::+matrix3x3-inl-inc+ nil)

(defparameter %assimp::+matrix4x4-h-inc+ nil)

(defparameter %assimp::+matrix4x4-inl-inc+ nil)

(defparameter %assimp::+max-bone-weights+ 2147483647)

(defparameter %assimp::+max-faces+ 2147483647)

(defparameter %assimp::+max-face-indices+ 32767)

(defparameter %assimp::+max-number-of-color-sets+ 8)

(defparameter %assimp::+max-number-of-texturecoords+ 8)

(defparameter %assimp::+max-vertices+ 2147483647)

(defparameter %assimp::+mesh-h-inc+ nil)

(defparameter %assimp::+metadata-h-inc+ nil)

(defparameter %assimp::+no-except+ nil)

(defparameter %assimp::+outofmemory+ -3)

(defparameter %assimp::+postprocess-h-inc+ nil)

(defparameter %assimp::+pushpack-is-defined+ nil)

(defparameter %assimp::+quaternion-h-inc+ nil)

(defparameter %assimp::+quaternion-inl-inc+ nil)

(defparameter %assimp::+sbbc-default-max-bones+ 60)

(defparameter %assimp::+scene-flags-allow-shared+ 32)

(defparameter %assimp::+scene-flags-incomplete+ 1)

(defparameter %assimp::+scene-flags-non-verbose-format+ 8)

(defparameter %assimp::+scene-flags-terrain+ 16)

(defparameter %assimp::+scene-flags-validated+ 2)

(defparameter %assimp::+scene-flags-validation-warning+ 4)

(defparameter %assimp::+scene-h-inc+ nil)

(defparameter %assimp::+slm-default-max-triangles+ 1000000)

(defparameter %assimp::+slm-default-max-vertices+ 1000000)

(defparameter %assimp::+success+ 0)

(defparameter %assimp::+texture-h-inc+ nil)

(defparameter %assimp::+texture-type-max+ 18)

(defparameter %assimp::+true+ 1)

(defparameter %assimp::+types-h-inc+ nil)

(defparameter %assimp::+uvtrafo-all+ 7)

(defparameter %assimp::+uvtrafo-rotation+ 2)

(defparameter %assimp::+uvtrafo-scaling+ 1)

(defparameter %assimp::+uvtrafo-translation+ 4)

(defparameter %assimp::+vector2d-h-inc+ nil)

(defparameter %assimp::+vector2d-inl-inc+ nil)

(defparameter %assimp::+vector3d-h-inc+ nil)

(defparameter %assimp::+vector3d-inl-inc+ nil)

(defparameter %assimp::+wont-return+ nil)

(defparameter %assimp::+wont-return-suffix+ nil)

(defparameter %assimp::+assimp-ai-real-text-precision+ 8)

(defparameter %assimp::+%ai-matkey-mappingmode-u-base+ "$tex.mapmodeu")

(defparameter %assimp::+%ai-matkey-mappingmode-v-base+ "$tex.mapmodev")

(defparameter %assimp::+%ai-matkey-mapping-base+ "$tex.mapping")

(defparameter %assimp::+%ai-matkey-texblend-base+ "$tex.blend")

(defparameter %assimp::+%ai-matkey-texflags-base+ "$tex.flags")

(defparameter %assimp::+%ai-matkey-texmap-axis-base+ "$tex.mapaxis")

(defparameter %assimp::+%ai-matkey-texop-base+ "$tex.op")

(defparameter %assimp::+%ai-matkey-texture-base+ "$tex.file")

(defparameter %assimp::+%ai-matkey-uvtransform-base+ "$tex.uvtrafo")

(defparameter %assimp::+%ai-matkey-uvwsrc-base+ "$tex.uvwsrc")

(defparameter %assimp::+get-material-float+ nil)

(defparameter %assimp::+get-material-integer+ nil)

(defparameter %assimp::+process-preset-target-realtime-fast+ 294955)

(defparameter %assimp::+process-preset-target-realtime-max-quality+ 3645131)

(defparameter %assimp::+process-preset-target-realtime-quality+ 498379)

(defparameter %assimp::+process-convert-to-left-handed+ 25165828)

(cffi:defcenum (%assimp::anim-behaviour :unsigned-int)
               "/home/borodust/devel/repo/aw-projects/aw-assimp/src/lib/assimp/include/assimp/anim.h:236:6"
               (:default 0)
               (:constant 1)
               (:linear 2)
               (:repeat 3)
               (:force32bit 2147483647))

(cffi:defcenum (%assimp::blend-mode :unsigned-int)
               "/home/borodust/devel/repo/aw-projects/aw-assimp/src/lib/assimp/include/assimp/material.h:440:6"
               (:default 0)
               (:additive 1)
               (:force32bit 2147483647))

(cffi:defcenum (%assimp::component :unsigned-int)
               "/usr/include/assimp/config.h:394:6"
               (:normals 2)
               (:tangents-and-bitangents 4)
               (:colors 8)
               (:texcoords 16)
               (:boneweights 32)
               (:animations 64)
               (:textures 128)
               (:lights 256)
               (:cameras 512)
               (:meshes 1024)
               (:materials 2048)
               (:force32bit -1610612737))

(cffi:defbitfield (%assimp::default-log-stream :unsigned-int)
                  "/home/borodust/devel/repo/aw-projects/aw-assimp/src/lib/assimp/include/assimp/types.h:452:6"
                  (:default-log-stream-file 1)
                  (:default-log-stream-stdout 2)
                  (:default-log-stream-stderr 4)
                  (:default-log-stream-debugger 8)
                  (:%ai-dls-enforce-enum-size 2147483647))

(cffi:defbitfield (%assimp::importer-flags :unsigned-int)
                  "/home/borodust/devel/repo/aw-projects/aw-assimp/src/lib/assimp/include/assimp/importerdesc.h:54:6"
                  (:support-text-flavour 1)
                  (:support-binary-flavour 2)
                  (:support-compressed-flavour 4)
                  (:limited-support 8)
                  (:experimental 16))

(cffi:defcenum (%assimp::light-source-type :unsigned-int)
               "/home/borodust/devel/repo/aw-projects/aw-assimp/src/lib/assimp/include/assimp/light.h:61:6"
               (:undefined 0)
               (:directional 1)
               (:point 2)
               (:spot 3)
               (:ambient 4)
               (:area 5)
               (:force32bit 2147483647))

(cffi:defcenum (%assimp::metadata-type :unsigned-int)
               "/home/borodust/devel/repo/aw-projects/aw-assimp/src/lib/assimp/include/assimp/metadata.h:62:14"
               (:bool 0)
               (:int32 1)
               (:uint64 2)
               (:float 3)
               (:double 4)
               (:aistring 5)
               (:aivector3d 6)
               (:meta-max 7)
               (:force-32bit 2147483647))

(cffi:defcenum (%assimp::morphing-method :unsigned-int)
               "/home/borodust/devel/repo/aw-projects/aw-assimp/src/lib/assimp/include/assimp/mesh.h:533:6"
               (:vertex-blend 1)
               (:morph-normalized 2)
               (:morph-relative 3)
               (:force32bit 2147483647))

(cffi:defcenum (%assimp::origin :unsigned-int)
               "/home/borodust/devel/repo/aw-projects/aw-assimp/src/lib/assimp/include/assimp/types.h:428:6"
               (:origin-set 0)
               (:origin-cur 1)
               (:origin-end 2)
               (:%ai-origin-enforce-enum-size 2147483647))

(cffi:defcenum (%assimp::post-process-steps :unsigned-int)
               "/home/borodust/devel/repo/aw-projects/aw-assimp/src/lib/assimp/include/assimp/postprocess.h:68:6"
               (:calc-tangent-space 1)
               (:join-identical-vertices 2)
               (:make-left-handed 4)
               (:triangulate 8)
               (:remove-component 16)
               (:gen-normals 32)
               (:gen-smooth-normals 64)
               (:split-large-meshes 128)
               (:pre-transform-vertices 256)
               (:limit-bone-weights 512)
               (:validate-data-structure 1024)
               (:improve-cache-locality 2048)
               (:remove-redundant-materials 4096)
               (:fix-infacing-normals 8192)
               (:sort-by-p-type 32768)
               (:find-degenerates 65536)
               (:find-invalid-data 131072)
               (:gen-uv-coords 262144)
               (:transform-uv-coords 524288)
               (:find-instances 1048576)
               (:optimize-meshes 2097152)
               (:optimize-graph 4194304)
               (:flip-u-vs 8388608)
               (:flip-winding-order 16777216)
               (:split-by-bone-count 33554432)
               (:debone 67108864)
               (:global-scale 134217728)
               (:embed-textures 268435456)
               (:force-gen-normals 536870912)
               (:drop-normals 1073741824)
               (:gen-bounding-boxes -2147483648))

(cffi:defbitfield (%assimp::primitive-type :unsigned-int)
                  "/home/borodust/devel/repo/aw-projects/aw-assimp/src/lib/assimp/include/assimp/mesh.h:359:6"
                  (:point 1)
                  (:line 2)
                  (:triangle 4)
                  (:polygon 8)
                  (:force32bit 2147483647))

(cffi:defcenum (%assimp::property-type-info :unsigned-int)
               "/home/borodust/devel/repo/aw-projects/aw-assimp/src/lib/assimp/include/assimp/material.h:522:6"
               (:float 1)
               (:double 2)
               (:string 3)
               (:integer 4)
               (:buffer 5)
               (:force32bit 2147483647))

(cffi:defcenum (%assimp::return :int)
               "/home/borodust/devel/repo/aw-projects/aw-assimp/src/lib/assimp/include/assimp/types.h:398:14"
               (:return-success 0)
               (:return-failure -1)
               (:return-outofmemory -3)
               (:%ai-enforce-enum-size 2147483647))

(cffi:defcenum (%assimp::shading-mode :unsigned-int)
               "/home/borodust/devel/repo/aw-projects/aw-assimp/src/lib/assimp/include/assimp/material.h:323:6"
               (:flat 1)
               (:gouraud 2)
               (:phong 3)
               (:blinn 4)
               (:toon 5)
               (:oren-nayar 6)
               (:minnaert 7)
               (:cook-torrance 8)
               (:no-shading 9)
               (:fresnel 10)
               (:force32bit 2147483647))

(cffi:defbitfield (%assimp::texture-flags :unsigned-int)
                  "/home/borodust/devel/repo/aw-projects/aw-assimp/src/lib/assimp/include/assimp/material.h:394:6"
                  (:invert 1)
                  (:use-alpha 2)
                  (:ignore-alpha 4)
                  (:force32bit 2147483647))

(cffi:defcenum (%assimp::texture-map-mode :unsigned-int)
               "/home/borodust/devel/repo/aw-projects/aw-assimp/src/lib/assimp/include/assimp/material.h:110:6"
               (:wrap 0)
               (:clamp 1)
               (:decal 3)
               (:mirror 2)
               (:force32bit 2147483647))

(cffi:defcenum (%assimp::texture-mapping :unsigned-int)
               "/home/borodust/devel/repo/aw-projects/aw-assimp/src/lib/assimp/include/assimp/material.h:145:6"
               (:uv 0)
               (:sphere 1)
               (:cylinder 2)
               (:box 3)
               (:plane 4)
               (:other 5)
               (:force32bit 2147483647))

(cffi:defcenum (%assimp::texture-op :unsigned-int)
               "/home/borodust/devel/repo/aw-projects/aw-assimp/src/lib/assimp/include/assimp/material.h:79:6"
               (:multiply 0)
               (:add 1)
               (:subtract 2)
               (:divide 3)
               (:smooth-add 4)
               (:signed-add 5)
               (:force32bit 2147483647))

(cffi:defcenum (%assimp::texture-type :unsigned-int)
               "/home/borodust/devel/repo/aw-projects/aw-assimp/src/lib/assimp/include/assimp/material.h:191:6"
               (:none 0)
               (:diffuse 1)
               (:specular 2)
               (:ambient 3)
               (:emissive 4)
               (:height 5)
               (:normals 6)
               (:shininess 7)
               (:opacity 8)
               (:displacement 9)
               (:lightmap 10)
               (:reflection 11)
               (:base-color 12)
               (:normal-camera 13)
               (:emission-color 14)
               (:metalness 15)
               (:diffuse-roughness 16)
               (:ambient-occlusion 17)
               (:unknown 18)
               (:force32bit 2147483647))

(cffi:defctype %assimp::%uint32 :unsigned-int)

(cffi:defcstruct (%assimp::string :size 1028)
                 (%assimp::length %assimp::%uint32 :offset 0)
                 (%assimp::data :char :count 1024 :offset 4))

(cffi:defctype %assimp::%real :float)

(cffi:defcstruct (%assimp::matrix4x4 :size 64)
                 (%assimp::a1 %assimp::%real :offset 0)
                 (%assimp::a2 %assimp::%real :offset 4)
                 (%assimp::a3 %assimp::%real :offset 8)
                 (%assimp::a4 %assimp::%real :offset 12)
                 (%assimp::b1 %assimp::%real :offset 16)
                 (%assimp::b2 %assimp::%real :offset 20)
                 (%assimp::b3 %assimp::%real :offset 24)
                 (%assimp::b4 %assimp::%real :offset 28)
                 (%assimp::c1 %assimp::%real :offset 32)
                 (%assimp::c2 %assimp::%real :offset 36)
                 (%assimp::c3 %assimp::%real :offset 40)
                 (%assimp::c4 %assimp::%real :offset 44)
                 (%assimp::d1 %assimp::%real :offset 48)
                 (%assimp::d2 %assimp::%real :offset 52)
                 (%assimp::d3 %assimp::%real :offset 56)
                 (%assimp::d4 %assimp::%real :offset 60))

(cffi:defcstruct (%assimp::node :size 1144))

(cffi:defctype %assimp::metadata-type %assimp::metadata-type)

(cffi:defcstruct (%assimp::metadata-entry :size 16)
                 (%assimp::type %assimp::metadata-type :offset 0)
                 (%assimp::data (:pointer :void) :offset 8))

(cffi:defcstruct (%assimp::metadata :size 24)
                 (%assimp::num-properties :unsigned-int :offset 0)
                 (%assimp::keys (:pointer (:struct %assimp::string))
                  :offset 8)
                 (%assimp::values
                  (:pointer (:struct %assimp::metadata-entry))
                  :offset 16))

(cffi:defcstruct (%assimp::node :size 1144)
                 (%assimp::name (:struct %assimp::string) :offset 0)
                 (%assimp::transformation
                  (:struct %assimp::matrix4x4) :offset 1028)
                 (%assimp::parent (:pointer (:struct %assimp::node))
                  :offset 1096)
                 (%assimp::num-children :unsigned-int :offset 1104)
                 (%assimp::children
                  (:pointer (:pointer (:struct %assimp::node)))
                  :offset 1112)
                 (%assimp::num-meshes :unsigned-int :offset 1120)
                 (%assimp::meshes (:pointer :unsigned-int) :offset
                  1128)
                 (%assimp::meta-data
                  (:pointer (:struct %assimp::metadata)) :offset
                  1136))

(cffi:defcstruct (%assimp::color4d :size 16)
                 (%assimp::r %assimp::%real :offset 0)
                 (%assimp::g %assimp::%real :offset 4)
                 (%assimp::b %assimp::%real :offset 8)
                 (%assimp::a %assimp::%real :offset 12))

(cffi:defcstruct (%assimp::vector3d :size 12)
                 (%assimp::x %assimp::%real :offset 0)
                 (%assimp::y %assimp::%real :offset 4)
                 (%assimp::z %assimp::%real :offset 8))

(cffi:defcstruct (%assimp::face :size 16)
                 (%assimp::num-indices :unsigned-int :offset 0)
                 (%assimp::indices (:pointer :unsigned-int) :offset
                  8))

(cffi:defcstruct (%assimp::vertex-weight :size 8)
                 (%assimp::vertex-id :unsigned-int :offset 0)
                 (%assimp::weight :float :offset 4))

(cffi:defcstruct (%assimp::bone :size 1104)
                 (%assimp::name (:struct %assimp::string) :offset 0)
                 (%assimp::num-weights :unsigned-int :offset 1028)
                 (%assimp::weights
                  (:pointer (:struct %assimp::vertex-weight)) :offset
                  1032)
                 (%assimp::offset-matrix (:struct %assimp::matrix4x4)
                  :offset 1040))

(cffi:defcstruct (%assimp::anim-mesh :size 1200)
                 (%assimp::name (:struct %assimp::string) :offset 0)
                 (%assimp::vertices
                  (:pointer (:struct %assimp::vector3d)) :offset
                  1032)
                 (%assimp::normals
                  (:pointer (:struct %assimp::vector3d)) :offset
                  1040)
                 (%assimp::tangents
                  (:pointer (:struct %assimp::vector3d)) :offset
                  1048)
                 (%assimp::bitangents
                  (:pointer (:struct %assimp::vector3d)) :offset
                  1056)
                 (%assimp::colors
                  (:pointer (:struct %assimp::color4d)) :count 8
                  :offset 1064)
                 (%assimp::texture-coords
                  (:pointer (:struct %assimp::vector3d)) :count 8
                  :offset 1128)
                 (%assimp::num-vertices :unsigned-int :offset 1192)
                 (%assimp::weight :float :offset 1196))

(cffi:defcstruct (%assimp::aabb :size 24)
                 (%assimp::min (:struct %assimp::vector3d) :offset 0)
                 (%assimp::max (:struct %assimp::vector3d) :offset
                  12))

(cffi:defcstruct (%assimp::mesh :size 1312)
                 (%assimp::primitive-types :unsigned-int :offset 0)
                 (%assimp::num-vertices :unsigned-int :offset 4)
                 (%assimp::num-faces :unsigned-int :offset 8)
                 (%assimp::vertices
                  (:pointer (:struct %assimp::vector3d)) :offset 16)
                 (%assimp::normals
                  (:pointer (:struct %assimp::vector3d)) :offset 24)
                 (%assimp::tangents
                  (:pointer (:struct %assimp::vector3d)) :offset 32)
                 (%assimp::bitangents
                  (:pointer (:struct %assimp::vector3d)) :offset 40)
                 (%assimp::colors
                  (:pointer (:struct %assimp::color4d)) :count 8
                  :offset 48)
                 (%assimp::texture-coords
                  (:pointer (:struct %assimp::vector3d)) :count 8
                  :offset 112)
                 (%assimp::num-uv-components :unsigned-int :count 8
                  :offset 176)
                 (%assimp::faces (:pointer (:struct %assimp::face))
                  :offset 208)
                 (%assimp::num-bones :unsigned-int :offset 216)
                 (%assimp::bones
                  (:pointer (:pointer (:struct %assimp::bone)))
                  :offset 224)
                 (%assimp::material-index :unsigned-int :offset 232)
                 (%assimp::name (:struct %assimp::string) :offset
                  236)
                 (%assimp::num-anim-meshes :unsigned-int :offset
                  1264)
                 (%assimp::anim-meshes
                  (:pointer (:pointer (:struct %assimp::anim-mesh)))
                  :offset 1272)
                 (%assimp::method :unsigned-int :offset 1280)
                 (%assimp::aabb (:struct %assimp::aabb) :offset 1284))

(cffi:defcstruct (%assimp::material-property :size 1056)
                 (%assimp::key (:struct %assimp::string) :offset 0)
                 (%assimp::semantic :unsigned-int :offset 1028)
                 (%assimp::index :unsigned-int :offset 1032)
                 (%assimp::data-length :unsigned-int :offset 1036)
                 (%assimp::type %assimp::property-type-info :offset
                  1040)
                 (%assimp::data :string :offset 1048))

(cffi:defcstruct (%assimp::material :size 16)
                 (%assimp::properties
                  (:pointer
                   (:pointer (:struct %assimp::material-property)))
                  :offset 0)
                 (%assimp::num-properties :unsigned-int :offset 8)
                 (%assimp::num-allocated :unsigned-int :offset 12))

(cffi:defcstruct (%assimp::quaternion :size 16)
                 (%assimp::w %assimp::%real :offset 0)
                 (%assimp::x %assimp::%real :offset 4)
                 (%assimp::y %assimp::%real :offset 8)
                 (%assimp::z %assimp::%real :offset 12))

(cffi:defcstruct (%assimp::quat-key :size 24)
                 (%assimp::time :double :offset 0)
                 (%assimp::value (:struct %assimp::quaternion)
                  :offset 8))

(cffi:defcstruct (%assimp::vector-key :size 24)
                 (%assimp::time :double :offset 0)
                 (%assimp::value (:struct %assimp::vector3d) :offset
                  8))

(cffi:defcstruct (%assimp::node-anim :size 1080)
                 (%assimp::node-name (:struct %assimp::string)
                  :offset 0)
                 (%assimp::num-position-keys :unsigned-int :offset
                  1028)
                 (%assimp::position-keys
                  (:pointer (:struct %assimp::vector-key)) :offset
                  1032)
                 (%assimp::num-rotation-keys :unsigned-int :offset
                  1040)
                 (%assimp::rotation-keys
                  (:pointer (:struct %assimp::quat-key)) :offset
                  1048)
                 (%assimp::num-scaling-keys :unsigned-int :offset
                  1056)
                 (%assimp::scaling-keys
                  (:pointer (:struct %assimp::vector-key)) :offset
                  1064)
                 (%assimp::pre-state %assimp::anim-behaviour :offset
                  1072)
                 (%assimp::post-state %assimp::anim-behaviour :offset
                  1076))

(cffi:defcstruct (%assimp::mesh-key :size 16)
                 (%assimp::time :double :offset 0)
                 (%assimp::value :unsigned-int :offset 8))

(cffi:defcstruct (%assimp::mesh-anim :size 1040)
                 (%assimp::name (:struct %assimp::string) :offset 0)
                 (%assimp::num-keys :unsigned-int :offset 1028)
                 (%assimp::keys
                  (:pointer (:struct %assimp::mesh-key)) :offset
                  1032))

(cffi:defcstruct (%assimp::mesh-morph-key :size 32)
                 (%assimp::time :double :offset 0)
                 (%assimp::values (:pointer :unsigned-int) :offset 8)
                 (%assimp::weights (:pointer :double) :offset 16)
                 (%assimp::num-values-and-weights :unsigned-int
                  :offset 24))

(cffi:defcstruct (%assimp::mesh-morph-anim :size 1040)
                 (%assimp::name (:struct %assimp::string) :offset 0)
                 (%assimp::num-keys :unsigned-int :offset 1028)
                 (%assimp::keys
                  (:pointer (:struct %assimp::mesh-morph-key))
                  :offset 1032))

(cffi:defcstruct (%assimp::animation :size 1096)
                 (%assimp::name (:struct %assimp::string) :offset 0)
                 (%assimp::duration :double :offset 1032)
                 (%assimp::ticks-per-second :double :offset 1040)
                 (%assimp::num-channels :unsigned-int :offset 1048)
                 (%assimp::channels
                  (:pointer (:pointer (:struct %assimp::node-anim)))
                  :offset 1056)
                 (%assimp::num-mesh-channels :unsigned-int :offset
                  1064)
                 (%assimp::mesh-channels
                  (:pointer (:pointer (:struct %assimp::mesh-anim)))
                  :offset 1072)
                 (%assimp::num-morph-mesh-channels :unsigned-int
                  :offset 1080)
                 (%assimp::morph-mesh-channels
                  (:pointer
                   (:pointer (:struct %assimp::mesh-morph-anim)))
                  :offset 1088))

(cffi:defcstruct (%assimp::texel :size 4)
                 (%assimp::b :unsigned-char :offset 0)
                 (%assimp::g :unsigned-char :offset 1)
                 (%assimp::r :unsigned-char :offset 2)
                 (%assimp::a :unsigned-char :offset 3))

(cffi:defcstruct (%assimp::texture :size 1064)
                 (%assimp::width :unsigned-int :offset 0)
                 (%assimp::height :unsigned-int :offset 4)
                 (%assimp::ach-format-hint :char :count 9 :offset 8)
                 (%assimp::pc-data
                  (:pointer (:struct %assimp::texel)) :offset 24)
                 (%assimp::filename (:struct %assimp::string) :offset
                  32))

(cffi:defcstruct (%assimp::color3d :size 12)
                 (%assimp::r %assimp::%real :offset 0)
                 (%assimp::g %assimp::%real :offset 4)
                 (%assimp::b %assimp::%real :offset 8))

(cffi:defcstruct (%assimp::vector2d :size 8)
                 (%assimp::x %assimp::%real :offset 0)
                 (%assimp::y %assimp::%real :offset 4))

(cffi:defcstruct (%assimp::light :size 1132)
                 (%assimp::name (:struct %assimp::string) :offset 0)
                 (%assimp::type %assimp::light-source-type :offset
                  1028)
                 (%assimp::position (:struct %assimp::vector3d)
                  :offset 1032)
                 (%assimp::direction (:struct %assimp::vector3d)
                  :offset 1044)
                 (%assimp::up (:struct %assimp::vector3d) :offset
                  1056)
                 (%assimp::attenuation-constant :float :offset 1068)
                 (%assimp::attenuation-linear :float :offset 1072)
                 (%assimp::attenuation-quadratic :float :offset 1076)
                 (%assimp::color-diffuse (:struct %assimp::color3d)
                  :offset 1080)
                 (%assimp::color-specular (:struct %assimp::color3d)
                  :offset 1092)
                 (%assimp::color-ambient (:struct %assimp::color3d)
                  :offset 1104)
                 (%assimp::angle-inner-cone :float :offset 1116)
                 (%assimp::angle-outer-cone :float :offset 1120)
                 (%assimp::size (:struct %assimp::vector2d) :offset
                  1124))

(cffi:defcstruct (%assimp::camera :size 1080)
                 (%assimp::name (:struct %assimp::string) :offset 0)
                 (%assimp::position (:struct %assimp::vector3d)
                  :offset 1028)
                 (%assimp::up (:struct %assimp::vector3d) :offset
                  1040)
                 (%assimp::look-at (:struct %assimp::vector3d)
                  :offset 1052)
                 (%assimp::horizontal-fov :float :offset 1064)
                 (%assimp::clip-plane-near :float :offset 1068)
                 (%assimp::clip-plane-far :float :offset 1072)
                 (%assimp::aspect :float :offset 1076))

(cffi:defcstruct (%assimp::scene :size 128)
                 (%assimp::flags :unsigned-int :offset 0)
                 (%assimp::root-node
                  (:pointer (:struct %assimp::node)) :offset 8)
                 (%assimp::num-meshes :unsigned-int :offset 16)
                 (%assimp::meshes
                  (:pointer (:pointer (:struct %assimp::mesh)))
                  :offset 24)
                 (%assimp::num-materials :unsigned-int :offset 32)
                 (%assimp::materials
                  (:pointer (:pointer (:struct %assimp::material)))
                  :offset 40)
                 (%assimp::num-animations :unsigned-int :offset 48)
                 (%assimp::animations
                  (:pointer (:pointer (:struct %assimp::animation)))
                  :offset 56)
                 (%assimp::num-textures :unsigned-int :offset 64)
                 (%assimp::textures
                  (:pointer (:pointer (:struct %assimp::texture)))
                  :offset 72)
                 (%assimp::num-lights :unsigned-int :offset 80)
                 (%assimp::lights
                  (:pointer (:pointer (:struct %assimp::light)))
                  :offset 88)
                 (%assimp::num-cameras :unsigned-int :offset 96)
                 (%assimp::cameras
                  (:pointer (:pointer (:struct %assimp::camera)))
                  :offset 104)
                 (%assimp::meta-data
                  (:pointer (:struct %assimp::metadata)) :offset 112)
                 (%assimp::private :string :offset 120))

(declaim (inline %assimp::apply-post-processing))

(cffi:defcfun ("aiApplyPostProcessing"
               %assimp::apply-post-processing)
              (:pointer (:struct %assimp::scene))
              (%assimp::p-scene (:pointer (:struct %assimp::scene)))
              (%assimp::p-flags :unsigned-int))

(cffi:defctype %assimp::log-stream-callback (:pointer :void))

(cffi:defcstruct (%assimp::log-stream :size 16)
                 (%assimp::callback %assimp::log-stream-callback
                  :offset 0)
                 (%assimp::user :string :offset 8))

(declaim (inline %assimp::attach-log-stream))

(cffi:defcfun ("aiAttachLogStream" %assimp::attach-log-stream)
              :void
              (%assimp::stream
               (:pointer (:struct %assimp::log-stream))))

(cffi:defcstruct (%assimp::property-store :size 1)
                 (%assimp::sentinel :char :offset 0))

(declaim (inline %assimp::create-property-store))

(cffi:defcfun ("aiCreatePropertyStore"
               %assimp::create-property-store)
              (:pointer (:struct %assimp::property-store)))

(cffi:defcstruct (%assimp::matrix3x3 :size 36)
                 (%assimp::a1 %assimp::%real :offset 0)
                 (%assimp::a2 %assimp::%real :offset 4)
                 (%assimp::a3 %assimp::%real :offset 8)
                 (%assimp::b1 %assimp::%real :offset 12)
                 (%assimp::b2 %assimp::%real :offset 16)
                 (%assimp::b3 %assimp::%real :offset 20)
                 (%assimp::c1 %assimp::%real :offset 24)
                 (%assimp::c2 %assimp::%real :offset 28)
                 (%assimp::c3 %assimp::%real :offset 32))

(declaim (inline %assimp::create-quaternion-from-matrix))

(cffi:defcfun ("aiCreateQuaternionFromMatrix"
               %assimp::create-quaternion-from-matrix)
              :void
              (%assimp::quat
               (:pointer (:struct %assimp::quaternion)))
              (%assimp::mat (:pointer (:struct %assimp::matrix3x3))))

(declaim (inline %assimp::decompose-matrix))

(cffi:defcfun ("aiDecomposeMatrix" %assimp::decompose-matrix)
              :void
              (%assimp::mat (:pointer (:struct %assimp::matrix4x4)))
              (%assimp::scaling
               (:pointer (:struct %assimp::vector3d)))
              (%assimp::rotation
               (:pointer (:struct %assimp::quaternion)))
              (%assimp::position
               (:pointer (:struct %assimp::vector3d))))

(declaim (inline %assimp::detach-all-log-streams))

(cffi:defcfun ("aiDetachAllLogStreams"
               %assimp::detach-all-log-streams)
              :void)

(declaim (inline %assimp::detach-log-stream))

(cffi:defcfun ("aiDetachLogStream" %assimp::detach-log-stream)
              %assimp::return
              (%assimp::stream
               (:pointer (:struct %assimp::log-stream))))

(cffi:defctype %assimp::bool :int)

(declaim (inline %assimp::enable-verbose-logging))

(cffi:defcfun ("aiEnableVerboseLogging"
               %assimp::enable-verbose-logging)
              :void
              (%assimp::d %assimp::bool))

(declaim (inline %assimp::get-error-string))

(cffi:defcfun ("aiGetErrorString" %assimp::get-error-string) :string)

(declaim (inline %assimp::get-extension-list))

(cffi:defcfun ("aiGetExtensionList" %assimp::get-extension-list)
              :void
              (%assimp::sz-out (:pointer (:struct %assimp::string))))

(cffi:defctype %assimp::size-t :unsigned-long-long)

(declaim (inline %assimp::get-import-format-count))

(cffi:defcfun ("aiGetImportFormatCount"
               %assimp::get-import-format-count)
              %assimp::size-t)

(cffi:defcstruct (%assimp::importer-desc :size 64)
                 (%assimp::name :string :offset 0)
                 (%assimp::author :string :offset 8)
                 (%assimp::maintainer :string :offset 16)
                 (%assimp::comments :string :offset 24)
                 (%assimp::flags :unsigned-int :offset 32)
                 (%assimp::min-major :unsigned-int :offset 36)
                 (%assimp::min-minor :unsigned-int :offset 40)
                 (%assimp::max-major :unsigned-int :offset 44)
                 (%assimp::max-minor :unsigned-int :offset 48)
                 (%assimp::file-extensions :string :offset 56))

(declaim (inline %assimp::get-import-format-description))

(cffi:defcfun ("aiGetImportFormatDescription"
               %assimp::get-import-format-description)
              (:pointer (:struct %assimp::importer-desc))
              (%assimp::p-index %assimp::size-t))

(declaim (inline %assimp::get-importer-desc))

(cffi:defcfun ("aiGetImporterDesc" %assimp::get-importer-desc)
              (:pointer (:struct %assimp::importer-desc))
              (%assimp::extension :string))

(declaim (inline %assimp::get-material-color))

(cffi:defcfun ("aiGetMaterialColor" %assimp::get-material-color)
              %assimp::return
              (%assimp::p-mat (:pointer (:struct %assimp::material)))
              (%assimp::p-key :string)
              (%assimp::type :unsigned-int)
              (%assimp::index :unsigned-int)
              (%assimp::p-out (:pointer (:struct %assimp::color4d))))

(declaim (inline %assimp::get-material-float-array))

(cffi:defcfun ("aiGetMaterialFloatArray"
               %assimp::get-material-float-array)
              %assimp::return
              (%assimp::p-mat (:pointer (:struct %assimp::material)))
              (%assimp::p-key :string)
              (%assimp::type :unsigned-int)
              (%assimp::index :unsigned-int)
              (%assimp::p-out (:pointer %assimp::%real))
              (%assimp::p-max (:pointer :unsigned-int)))

(declaim (inline %assimp::get-material-integer-array))

(cffi:defcfun ("aiGetMaterialIntegerArray"
               %assimp::get-material-integer-array)
              %assimp::return
              (%assimp::p-mat (:pointer (:struct %assimp::material)))
              (%assimp::p-key :string)
              (%assimp::type :unsigned-int)
              (%assimp::index :unsigned-int)
              (%assimp::p-out (:pointer :int))
              (%assimp::p-max (:pointer :unsigned-int)))

(declaim (inline %assimp::get-material-property))

(cffi:defcfun ("aiGetMaterialProperty"
               %assimp::get-material-property)
              %assimp::return
              (%assimp::p-mat (:pointer (:struct %assimp::material)))
              (%assimp::p-key :string)
              (%assimp::type :unsigned-int)
              (%assimp::index :unsigned-int)
              (%assimp::p-prop-out
               (:pointer
                (:pointer (:struct %assimp::material-property)))))

(declaim (inline %assimp::get-material-string))

(cffi:defcfun ("aiGetMaterialString" %assimp::get-material-string)
              %assimp::return
              (%assimp::p-mat (:pointer (:struct %assimp::material)))
              (%assimp::p-key :string)
              (%assimp::type :unsigned-int)
              (%assimp::index :unsigned-int)
              (%assimp::p-out (:pointer (:struct %assimp::string))))

(declaim (inline %assimp::get-material-texture))

(cffi:defcfun ("aiGetMaterialTexture" %assimp::get-material-texture)
              %assimp::return
              (%assimp::mat (:pointer (:struct %assimp::material)))
              (%assimp::type %assimp::texture-type)
              (%assimp::index :unsigned-int)
              (%assimp::path (:pointer (:struct %assimp::string)))
              (%assimp::mapping (:pointer %assimp::texture-mapping))
              (%assimp::uvindex (:pointer :unsigned-int))
              (%assimp::blend (:pointer %assimp::%real))
              (%assimp::op (:pointer %assimp::texture-op))
              (%assimp::mapmode (:pointer %assimp::texture-map-mode))
              (%assimp::flags (:pointer :unsigned-int)))

(declaim (inline %assimp::get-material-texture-count))

(cffi:defcfun ("aiGetMaterialTextureCount"
               %assimp::get-material-texture-count)
              :unsigned-int
              (%assimp::p-mat (:pointer (:struct %assimp::material)))
              (%assimp::type %assimp::texture-type))

(cffi:defcstruct (%assimp::uv-transform :size 20)
                 (%assimp::translation (:struct %assimp::vector2d)
                  :offset 0)
                 (%assimp::scaling (:struct %assimp::vector2d)
                  :offset 8)
                 (%assimp::rotation %assimp::%real :offset 16))

(declaim (inline %assimp::get-material-uv-transform))

(cffi:defcfun ("aiGetMaterialUVTransform"
               %assimp::get-material-uv-transform)
              %assimp::return
              (%assimp::p-mat (:pointer (:struct %assimp::material)))
              (%assimp::p-key :string)
              (%assimp::type :unsigned-int)
              (%assimp::index :unsigned-int)
              (%assimp::p-out
               (:pointer (:struct %assimp::uv-transform))))

(cffi:defcstruct (%assimp::memory-info :size 32)
                 (%assimp::textures :unsigned-int :offset 0)
                 (%assimp::materials :unsigned-int :offset 4)
                 (%assimp::meshes :unsigned-int :offset 8)
                 (%assimp::nodes :unsigned-int :offset 12)
                 (%assimp::animations :unsigned-int :offset 16)
                 (%assimp::cameras :unsigned-int :offset 20)
                 (%assimp::lights :unsigned-int :offset 24)
                 (%assimp::total :unsigned-int :offset 28))

(declaim (inline %assimp::get-memory-requirements))

(cffi:defcfun ("aiGetMemoryRequirements"
               %assimp::get-memory-requirements)
              :void
              (%assimp::p-in (:pointer (:struct %assimp::scene)))
              (%assimp::in (:pointer (:struct %assimp::memory-info))))

(declaim (inline %assimp::get-predefined-log-stream))

(cffi:defcfun ("__claw_aiGetPredefinedLogStream"
               %assimp::get-predefined-log-stream)
              (:pointer (:struct %assimp::log-stream))
              (%assimp::%%claw-result-
               (:pointer (:struct %assimp::log-stream)))
              (%assimp::p-streams %assimp::default-log-stream)
              (%assimp::file :string))

(declaim (inline %assimp::identity-matrix3))

(cffi:defcfun ("aiIdentityMatrix3" %assimp::identity-matrix3)
              :void
              (%assimp::mat (:pointer (:struct %assimp::matrix3x3))))

(declaim (inline %assimp::identity-matrix4))

(cffi:defcfun ("aiIdentityMatrix4" %assimp::identity-matrix4)
              :void
              (%assimp::mat (:pointer (:struct %assimp::matrix4x4))))

(declaim (inline %assimp::import-file))

(cffi:defcfun ("aiImportFile" %assimp::import-file)
              (:pointer (:struct %assimp::scene))
              (%assimp::p-file :string)
              (%assimp::p-flags :unsigned-int))

(cffi:defctype %assimp::file-open-proc (:pointer :void))

(cffi:defctype %assimp::file-close-proc (:pointer :void))

(cffi:defctype %assimp::user-data :string)

(cffi:defcstruct (%assimp::file-io :size 24)
                 (%assimp::open-proc %assimp::file-open-proc :offset
                  0)
                 (%assimp::close-proc %assimp::file-close-proc
                  :offset 8)
                 (%assimp::user-data %assimp::user-data :offset 16))

(declaim (inline %assimp::import-file-ex))

(cffi:defcfun ("aiImportFileEx" %assimp::import-file-ex)
              (:pointer (:struct %assimp::scene))
              (%assimp::p-file :string)
              (%assimp::p-flags :unsigned-int)
              (%assimp::p-fs (:pointer (:struct %assimp::file-io))))

(declaim (inline %assimp::import-file-ex-with-properties))

(cffi:defcfun ("aiImportFileExWithProperties"
               %assimp::import-file-ex-with-properties)
              (:pointer (:struct %assimp::scene))
              (%assimp::p-file :string)
              (%assimp::p-flags :unsigned-int)
              (%assimp::p-fs (:pointer (:struct %assimp::file-io)))
              (%assimp::p-props
               (:pointer (:struct %assimp::property-store))))

(declaim (inline %assimp::import-file-from-memory))

(cffi:defcfun ("aiImportFileFromMemory"
               %assimp::import-file-from-memory)
              (:pointer (:struct %assimp::scene))
              (%assimp::p-buffer :string)
              (%assimp::p-length :unsigned-int)
              (%assimp::p-flags :unsigned-int)
              (%assimp::p-hint :string))

(declaim (inline %assimp::import-file-from-memory-with-properties))

(cffi:defcfun ("aiImportFileFromMemoryWithProperties"
               %assimp::import-file-from-memory-with-properties)
              (:pointer (:struct %assimp::scene))
              (%assimp::p-buffer :string)
              (%assimp::p-length :unsigned-int)
              (%assimp::p-flags :unsigned-int)
              (%assimp::p-hint :string)
              (%assimp::p-props
               (:pointer (:struct %assimp::property-store))))

(declaim (inline %assimp::is-extension-supported))

(cffi:defcfun ("aiIsExtensionSupported"
               %assimp::is-extension-supported)
              %assimp::bool
              (%assimp::sz-extension :string))

(declaim (inline %assimp::multiply-matrix3))

(cffi:defcfun ("aiMultiplyMatrix3" %assimp::multiply-matrix3)
              :void
              (%assimp::dst (:pointer (:struct %assimp::matrix3x3)))
              (%assimp::src (:pointer (:struct %assimp::matrix3x3))))

(declaim (inline %assimp::multiply-matrix4))

(cffi:defcfun ("aiMultiplyMatrix4" %assimp::multiply-matrix4)
              :void
              (%assimp::dst (:pointer (:struct %assimp::matrix4x4)))
              (%assimp::src (:pointer (:struct %assimp::matrix4x4))))

(declaim (inline %assimp::release-import))

(cffi:defcfun ("aiReleaseImport" %assimp::release-import)
              :void
              (%assimp::p-scene (:pointer (:struct %assimp::scene))))

(declaim (inline %assimp::release-property-store))

(cffi:defcfun ("aiReleasePropertyStore"
               %assimp::release-property-store)
              :void
              (%assimp::p
               (:pointer (:struct %assimp::property-store))))

(declaim (inline %assimp::set-import-property-float))

(cffi:defcfun ("aiSetImportPropertyFloat"
               %assimp::set-import-property-float)
              :void
              (%assimp::store
               (:pointer (:struct %assimp::property-store)))
              (%assimp::sz-name :string)
              (%assimp::value %assimp::%real))

(declaim (inline %assimp::set-import-property-integer))

(cffi:defcfun ("aiSetImportPropertyInteger"
               %assimp::set-import-property-integer)
              :void
              (%assimp::store
               (:pointer (:struct %assimp::property-store)))
              (%assimp::sz-name :string)
              (%assimp::value :int))

(declaim (inline %assimp::set-import-property-matrix))

(cffi:defcfun ("aiSetImportPropertyMatrix"
               %assimp::set-import-property-matrix)
              :void
              (%assimp::store
               (:pointer (:struct %assimp::property-store)))
              (%assimp::sz-name :string)
              (%assimp::mat (:pointer (:struct %assimp::matrix4x4))))

(declaim (inline %assimp::set-import-property-string))

(cffi:defcfun ("aiSetImportPropertyString"
               %assimp::set-import-property-string)
              :void
              (%assimp::store
               (:pointer (:struct %assimp::property-store)))
              (%assimp::sz-name :string)
              (%assimp::st (:pointer (:struct %assimp::string))))

(declaim (inline %assimp::transform-vec-by-matrix3))

(cffi:defcfun ("aiTransformVecByMatrix3"
               %assimp::transform-vec-by-matrix3)
              :void
              (%assimp::vec (:pointer (:struct %assimp::vector3d)))
              (%assimp::mat (:pointer (:struct %assimp::matrix3x3))))

(declaim (inline %assimp::transform-vec-by-matrix4))

(cffi:defcfun ("aiTransformVecByMatrix4"
               %assimp::transform-vec-by-matrix4)
              :void
              (%assimp::vec (:pointer (:struct %assimp::vector3d)))
              (%assimp::mat (:pointer (:struct %assimp::matrix4x4))))

(declaim (inline %assimp::transpose-matrix3))

(cffi:defcfun ("aiTransposeMatrix3" %assimp::transpose-matrix3)
              :void
              (%assimp::mat (:pointer (:struct %assimp::matrix3x3))))

(declaim (inline %assimp::transpose-matrix4))

(cffi:defcfun ("aiTransposeMatrix4" %assimp::transpose-matrix4)
              :void
              (%assimp::mat (:pointer (:struct %assimp::matrix4x4))))

(cffi:defctype %assimp::file-read-proc (:pointer :void))

(cffi:defctype %assimp::file-write-proc (:pointer :void))

(cffi:defctype %assimp::file-tell-proc (:pointer :void))

(cffi:defctype %assimp::file-seek (:pointer :void))

(cffi:defctype %assimp::file-flush-proc (:pointer :void))

(cffi:defcstruct (%assimp::file :size 56)
                 (%assimp::read-proc %assimp::file-read-proc :offset
                  0)
                 (%assimp::write-proc %assimp::file-write-proc
                  :offset 8)
                 (%assimp::tell-proc %assimp::file-tell-proc :offset
                  16)
                 (%assimp::file-size-proc %assimp::file-tell-proc
                  :offset 24)
                 (%assimp::seek-proc %assimp::file-seek :offset 32)
                 (%assimp::flush-proc %assimp::file-flush-proc
                  :offset 40)
                 (%assimp::user-data %assimp::user-data :offset 48))

(cffi:defcstruct (%assimp::plane :size 16)
                 (%assimp::a %assimp::%real :offset 0)
                 (%assimp::b %assimp::%real :offset 4)
                 (%assimp::c %assimp::%real :offset 8)
                 (%assimp::d %assimp::%real :offset 12))

(cffi:defcstruct (%assimp::ray :size 24)
                 (%assimp::pos (:struct %assimp::vector3d) :offset 0)
                 (%assimp::dir (:struct %assimp::vector3d) :offset
                  12))

(cffi:defctype %assimp::return %assimp::return)

(eval-when (:load-toplevel :compile-toplevel :execute)
  (export '%assimp::key :%assimp)
  (export '%assimp::get-import-format-description :%assimp)
  (export '%assimp::+math-half-pi+ :%assimp)
  (export '%assimp::open-proc :%assimp)
  (export '%assimp::property-type-info :%assimp)
  (export '%assimp::write-proc :%assimp)
  (export '%assimp::+math-two-pi+ :%assimp)
  (export '%assimp::+scene-flags-non-verbose-format+ :%assimp)
  (export '%assimp::+wont-return-suffix+ :%assimp)
  (export '%assimp::file-read-proc :%assimp)
  (export '%assimp::+matrix3x3-inl-inc+ :%assimp)
  (export '%assimp::+config-pp-fd-checkarea+ :%assimp)
  (export '%assimp::bone :%assimp)
  (export '%assimp::get-material-color :%assimp)
  (export '%assimp::mesh :%assimp)
  (export '%assimp::+types-h-inc+ :%assimp)
  (export '%assimp::+%ai-matkey-texture-base+ :%assimp)
  (export '%assimp::primitive-type :%assimp)
  (export '%assimp::file-seek :%assimp)
  (export '%assimp::+config-import-collada-use-collada-names+
          :%assimp)
  (export '%assimp::get-memory-requirements :%assimp)
  (export '%assimp::parent :%assimp)
  (export '%assimp::a2 :%assimp)
  (export '%assimp::+max-face-indices+ :%assimp)
  (export '%assimp::+process-preset-target-realtime-fast+ :%assimp)
  (export '%assimp::keys :%assimp)
  (export '%assimp::shading-mode :%assimp)
  (export '%assimp::+matkey-shader-tesselation+ :%assimp)
  (export '%assimp::+matkey-color-diffuse+ :%assimp)
  (export '%assimp::+matkey-opacity+ :%assimp)
  (export '%assimp::time :%assimp)
  (export '%assimp::+aabb-h-inc+ :%assimp)
  (export '%assimp::+config-import-fbx-read-all-materials+ :%assimp)
  (export '%assimp::+matkey-shininess-strength+ :%assimp)
  (export '%assimp::metadata :%assimp)
  (export '%assimp::num-allocated :%assimp)
  (export '%assimp::+slm-default-max-vertices+ :%assimp)
  (export '%assimp::+math-half-pi-f+ :%assimp)
  (export '%assimp::read-proc :%assimp)
  (export '%assimp::+matkey-refracti+ :%assimp)
  (export '%assimp::dir :%assimp)
  (export '%assimp::close-proc :%assimp)
  (export '%assimp::property-store :%assimp)
  (export '%assimp::+metadata-h-inc+ :%assimp)
  (export '%assimp::memory-info :%assimp)
  (export '%assimp::+config-global-scale-factor-key+ :%assimp)
  (export '%assimp::num-uv-components :%assimp)
  (export '%assimp::bitangents :%assimp)
  (export '%assimp::+matkey-global-background-image+ :%assimp)
  (export '%assimp::+matkey-reflectivity+ :%assimp)
  (export '%assimp::+config-import-unreal-keyframe+ :%assimp)
  (export '%assimp::enable-verbose-logging :%assimp)
  (export '%assimp::+process-preset-target-realtime-max-quality+
          :%assimp)
  (export '%assimp::max-major :%assimp)
  (export '%assimp::primitive-types :%assimp)
  (export '%assimp::aabb :%assimp)
  (export '%assimp::+config-pp-sbbc-max-bones+ :%assimp)
  (export '%assimp::texture-type :%assimp)
  (export '%assimp::pc-data :%assimp)
  (export '%assimp::num-bones :%assimp)
  (export '%assimp::vector2d :%assimp)
  (export '%assimp::anim-mesh :%assimp)
  (export '%assimp::+config-import-fbx-read-materials+ :%assimp)
  (export '%assimp::+lmw-max-weights+ :%assimp)
  (export '%assimp::angle-outer-cone :%assimp)
  (export '%assimp::get-material-uv-transform :%assimp)
  (export '%assimp::callback :%assimp)
  (export '%assimp::+config-import-fbx-read-lights+ :%assimp)
  (export '%assimp::+matkey-shading-model+ :%assimp)
  (export '%assimp::import-file-from-memory :%assimp)
  (export '%assimp::semantic :%assimp)
  (export '%assimp::+config-pp-rvc-flags+ :%assimp)
  (export '%assimp::+config-pp-tuv-evaluate+ :%assimp)
  (export '%assimp::c1 :%assimp)
  (export '%assimp::sentinel :%assimp)
  (export '%assimp::+config-pp-icl-ptcache-size+ :%assimp)
  (export '%assimp::r :%assimp)
  (export '%assimp::+get-material-integer+ :%assimp)
  (export '%assimp::z :%assimp)
  (export '%assimp::name :%assimp)
  (export '%assimp::+uvtrafo-translation+ :%assimp)
  (export '%assimp::bones :%assimp)
  (export '%assimp::+config-import-no-skeleton-meshes+ :%assimp)
  (export '%assimp::position :%assimp)
  (export '%assimp::colors :%assimp)
  (export '%assimp::color-ambient :%assimp)
  (export '%assimp::post-process-steps :%assimp)
  (export '%assimp::+%ai-matkey-texop-base+ :%assimp)
  (export '%assimp::num-scaling-keys :%assimp)
  (export '%assimp::+config-import-lws-anim-start+ :%assimp)
  (export '%assimp::attenuation-quadratic :%assimp)
  (export '%assimp::+import-ifc-default-cylindrical-tessellation+
          :%assimp)
  (export '%assimp::+matkey-twosided+ :%assimp)
  (export '%assimp::+defines-h-inc+ :%assimp)
  (export '%assimp::+config-h-inc+ :%assimp)
  (export '%assimp::file-close-proc :%assimp)
  (export '%assimp::+config-glob-measure-time+ :%assimp)
  (export '%assimp::quat-key :%assimp)
  (export '%assimp::multiply-matrix4 :%assimp)
  (export '%assimp::num-textures :%assimp)
  (export '%assimp::bool :%assimp)
  (export '%assimp::+config-import-ifc-skip-space-representations+
          :%assimp)
  (export '%assimp::rotation :%assimp)
  (export '%assimp::+scene-flags-validated+ :%assimp)
  (export '%assimp::mesh-anim :%assimp)
  (export '%assimp::+wont-return+ :%assimp)
  (export '%assimp::min-major :%assimp)
  (export '%assimp::y :%assimp)
  (export '%assimp::decompose-matrix :%assimp)
  (export '%assimp::metadata-type :%assimp)
  (export '%assimp::ach-format-hint :%assimp)
  (export '%assimp::duration :%assimp)
  (export '%assimp::attenuation-constant :%assimp)
  (export '%assimp::max :%assimp)
  (export '%assimp::num-keys :%assimp)
  (export '%assimp::user :%assimp)
  (export '%assimp::+quaternion-h-inc+ :%assimp)
  (export '%assimp::+max-number-of-color-sets+ :%assimp)
  (export '%assimp::+quaternion-inl-inc+ :%assimp)
  (export '%assimp::+config-pp-og-exclude-list+ :%assimp)
  (export '%assimp::cameras :%assimp)
  (export '%assimp::material-index :%assimp)
  (export '%assimp::+config-pp-ptv-root-transformation+ :%assimp)
  (export '%assimp::uv-transform :%assimp)
  (export '%assimp::%uint32 :%assimp)
  (export '%assimp::scene :%assimp)
  (export '%assimp::a :%assimp)
  (export '%assimp::+uvtrafo-all+ :%assimp)
  (export '%assimp::num-children :%assimp)
  (export '%assimp::+light-h-inc+ :%assimp)
  (export '%assimp::anim-meshes :%assimp)
  (export '%assimp::anim-behaviour :%assimp)
  (export '%assimp::max-minor :%assimp)
  (export '%assimp::+get-material-float+ :%assimp)
  (export '%assimp::color-diffuse :%assimp)
  (export '%assimp::+config-import-remove-empty-bones+ :%assimp)
  (export '%assimp::a1 :%assimp)
  (export '%assimp::get-material-integer-array :%assimp)
  (export '%assimp::+process-preset-target-realtime-quality+
          :%assimp)
  (export '%assimp::values :%assimp)
  (export '%assimp::blend-mode :%assimp)
  (export '%assimp::length :%assimp)
  (export '%assimp::+uvtrafo-scaling+ :%assimp)
  (export '%assimp::+config-pp-lbw-max-weights+ :%assimp)
  (export '%assimp::+%ai-matkey-mappingmode-v-base+ :%assimp)
  (export '%assimp::horizontal-fov :%assimp)
  (export '%assimp::ticks-per-second :%assimp)
  (export '%assimp::+%ai-matkey-mappingmode-u-base+ :%assimp)
  (export '%assimp::c3 :%assimp)
  (export '%assimp::b1 :%assimp)
  (export '%assimp::tell-proc :%assimp)
  (export '%assimp::+max-number-of-texturecoords+ :%assimp)
  (export '%assimp::b3 :%assimp)
  (export '%assimp::d3 :%assimp)
  (export '%assimp::is-extension-supported :%assimp)
  (export '%assimp::+config-pp-ptv-normalize+ :%assimp)
  (export '%assimp::import-file-ex :%assimp)
  (export '%assimp::num-position-keys :%assimp)
  (export '%assimp::create-property-store :%assimp)
  (export '%assimp::matrix4x4 :%assimp)
  (export '%assimp::create-quaternion-from-matrix :%assimp)
  (export '%assimp::+embedded-texname-prefix+ :%assimp)
  (export '%assimp::+vector2d-inl-inc+ :%assimp)
  (export '%assimp::import-file-ex-with-properties :%assimp)
  (export '%assimp::+matkey-transparencyfactor+ :%assimp)
  (export '%assimp::+matkey-shader-vertex+ :%assimp)
  (export '%assimp::+false+ :%assimp)
  (export '%assimp::+config-import-fbx-optimize-empty-animation-curves+
          :%assimp)
  (export '%assimp::transform-vec-by-matrix4 :%assimp)
  (export '%assimp::file-open-proc :%assimp)
  (export '%assimp::+config-import-fbx-read-animations+ :%assimp)
  (export '%assimp::apply-post-processing :%assimp)
  (export '%assimp::get-importer-desc :%assimp)
  (export '%assimp::vector-key :%assimp)
  (export '%assimp::+max-faces+ :%assimp)
  (export '%assimp::+no-except+ :%assimp)
  (export '%assimp::%real :%assimp)
  (export '%assimp::+matkey-shader-geo+ :%assimp)
  (export '%assimp::+config-import-md3-shader-src+ :%assimp)
  (export '%assimp::log-stream :%assimp)
  (export '%assimp::return :%assimp)
  (export '%assimp::set-import-property-float :%assimp)
  (export '%assimp::importer-desc :%assimp)
  (export '%assimp::file-extensions :%assimp)
  (export '%assimp::+default-material-name+ :%assimp)
  (export '%assimp::width :%assimp)
  (export '%assimp::texture-coords :%assimp)
  (export '%assimp::num-lights :%assimp)
  (export '%assimp::+config-import-ogre-material-file+ :%assimp)
  (export '%assimp::+config-import-irr-anim-fps+ :%assimp)
  (export '%assimp::vertices :%assimp)
  (export '%assimp::set-import-property-integer :%assimp)
  (export '%assimp::indices :%assimp)
  (export '%assimp::textures :%assimp)
  (export '%assimp::node-name :%assimp)
  (export '%assimp::flush-proc :%assimp)
  (export '%assimp::+config-import-fbx-strict-mode+ :%assimp)
  (export '%assimp::d1 :%assimp)
  (export '%assimp::num-vertices :%assimp)
  (export '%assimp::weights :%assimp)
  (export '%assimp::get-material-texture-count :%assimp)
  (export '%assimp::post-state :%assimp)
  (export '%assimp::+config-import-ac-separate-bfcull+ :%assimp)
  (export '%assimp::b4 :%assimp)
  (export '%assimp::+config-pp-slm-triangle-limit+ :%assimp)
  (export '%assimp::+config-import-mdc-keyframe+ :%assimp)
  (export '%assimp::get-error-string :%assimp)
  (export '%assimp::+scene-flags-validation-warning+ :%assimp)
  (export '%assimp::+matkey-bumpscaling+ :%assimp)
  (export '%assimp::+assimp-h-inc+ :%assimp)
  (export '%assimp::a4 :%assimp)
  (export '%assimp::tangents :%assimp)
  (export '%assimp::num-animations :%assimp)
  (export '%assimp::quaternion :%assimp)
  (export '%assimp::b2 :%assimp)
  (export '%assimp::log-stream-callback :%assimp)
  (export '%assimp::get-material-float-array :%assimp)
  (export '%assimp::import-file :%assimp)
  (export '%assimp::+config-fbx-convert-to-m+ :%assimp)
  (export '%assimp::+vector3d-inl-inc+ :%assimp)
  (export '%assimp::+config-pp-fid-ignore-texturecoords+ :%assimp)
  (export '%assimp::+config-import-mdl-keyframe+ :%assimp)
  (export '%assimp::+config-pp-fd-remove+ :%assimp)
  (export '%assimp::+config-import-md5-no-anim-autoload+ :%assimp)
  (export '%assimp::+config-import-ter-make-uvs+ :%assimp)
  (export '%assimp::+max-vertices+ :%assimp)
  (export '%assimp::filename :%assimp)
  (export '%assimp::+math-pi-f+ :%assimp)
  (export '%assimp::component :%assimp)
  (export '%assimp::+failure+ :%assimp)
  (export '%assimp::direction :%assimp)
  (export '%assimp::index :%assimp)
  (export '%assimp::d :%assimp)
  (export '%assimp::+config-import-md3-skin-name+ :%assimp)
  (export '%assimp::+config-import-lws-anim-end+ :%assimp)
  (export '%assimp::+config-pp-gsn-max-smoothing-angle+ :%assimp)
  (export '%assimp::+config-import-fbx-read-textures+ :%assimp)
  (export '%assimp::meshes :%assimp)
  (export '%assimp::+vector3d-h-inc+ :%assimp)
  (export '%assimp::transformation :%assimp)
  (export '%assimp::flags :%assimp)
  (export '%assimp::data :%assimp)
  (export '%assimp::+texture-type-max+ :%assimp)
  (export '%assimp::+sbbc-default-max-bones+ :%assimp)
  (export '%assimp::+config-import-unreal-handle-flags+ :%assimp)
  (export '%assimp::+texture-h-inc+ :%assimp)
  (export '%assimp::+pushpack-is-defined+ :%assimp)
  (export '%assimp::vertex-weight :%assimp)
  (export '%assimp::+config-app-scale-key+ :%assimp)
  (export '%assimp::+math-pi+ :%assimp)
  (export '%assimp::+matrix4x4-inl-inc+ :%assimp)
  (export '%assimp::detach-log-stream :%assimp)
  (export '%assimp::import-file-from-memory-with-properties :%assimp)
  (export '%assimp::root-node :%assimp)
  (export '%assimp::+process-convert-to-left-handed+ :%assimp)
  (export '%assimp::type :%assimp)
  (export '%assimp::+camera-h-inc+ :%assimp)
  (export '%assimp::identity-matrix4 :%assimp)
  (export '%assimp::num-properties :%assimp)
  (export '%assimp::size-t :%assimp)
  (export '%assimp::num-indices :%assimp)
  (export '%assimp::comments :%assimp)
  (export '%assimp::attach-log-stream :%assimp)
  (export '%assimp::+matkey-shininess+ :%assimp)
  (export '%assimp::author :%assimp)
  (export '%assimp::+config-pp-db-all-or-none+ :%assimp)
  (export '%assimp::weight :%assimp)
  (export '%assimp::c2 :%assimp)
  (export '%assimp::offset-matrix :%assimp)
  (export '%assimp::light-source-type :%assimp)
  (export '%assimp::faces :%assimp)
  (export '%assimp::+math-two-pi-f+ :%assimp)
  (export '%assimp::channels :%assimp)
  (export '%assimp::metadata-entry :%assimp)
  (export '%assimp::+matkey-color-transparent+ :%assimp)
  (export '%assimp::+fileio-h-inc+ :%assimp)
  (export '%assimp::file :%assimp)
  (export '%assimp::file-write-proc :%assimp)
  (export '%assimp::meta-data :%assimp)
  (export '%assimp::+config-pp-slm-vertex-limit+ :%assimp)
  (export '%assimp::properties :%assimp)
  (export '%assimp::+config-import-fbx-read-cameras+ :%assimp)
  (export '%assimp::lights :%assimp)
  (export '%assimp::num-weights :%assimp)
  (export '%assimp::get-predefined-log-stream :%assimp)
  (export '%assimp::scaling-keys :%assimp)
  (export '%assimp::+matkey-global-shaderlang+ :%assimp)
  (export '%assimp::+%ai-matkey-uvtransform-base+ :%assimp)
  (export '%assimp::multiply-matrix3 :%assimp)
  (export '%assimp::+config-import-fbx-embedded-textures-legacy-naming+
          :%assimp)
  (export '%assimp::default-log-stream :%assimp)
  (export '%assimp::+color4d-inl-inc+ :%assimp)
  (export '%assimp::w :%assimp)
  (export '%assimp::texture-mapping :%assimp)
  (export '%assimp::+config-import-md3-keyframe+ :%assimp)
  (export '%assimp::+%ai-matkey-mapping-base+ :%assimp)
  (export '%assimp::+config-import-fbx-read-all-geometry-layers+
          :%assimp)
  (export '%assimp::+config-favour-speed+ :%assimp)
  (export '%assimp::+scene-h-inc+ :%assimp)
  (export '%assimp::num-values-and-weights :%assimp)
  (export '%assimp::+config-import-ogre-texturetype-from-filename+
          :%assimp)
  (export '%assimp::num-morph-mesh-channels :%assimp)
  (export '%assimp::+matkey-color-reflective+ :%assimp)
  (export '%assimp::+config-import-smd-load-animation-list+ :%assimp)
  (export '%assimp::+config-export-xfile-64bit+ :%assimp)
  (export '%assimp::clip-plane-far :%assimp)
  (export '%assimp::+config-pp-ct-texture-channel-index+ :%assimp)
  (export '%assimp::+debone-threshold+ :%assimp)
  (export '%assimp::+matkey-color-ambient+ :%assimp)
  (export '%assimp::num-rotation-keys :%assimp)
  (export '%assimp::transpose-matrix3 :%assimp)
  (export '%assimp::release-import :%assimp)
  (export '%assimp::+config-import-ifc-smoothing-angle+ :%assimp)
  (export '%assimp::+matkey-color-specular+ :%assimp)
  (export '%assimp::texture :%assimp)
  (export '%assimp::texture-flags :%assimp)
  (export '%assimp::x :%assimp)
  (export '%assimp::+config-global-scale-factor-default+ :%assimp)
  (export '%assimp::+matkey-shader-compute+ :%assimp)
  (export '%assimp::+config-pp-ptv-keep-hierarchy+ :%assimp)
  (export '%assimp::transpose-matrix4 :%assimp)
  (export '%assimp::look-at :%assimp)
  (export '%assimp::animation :%assimp)
  (export '%assimp::+config-pp-fid-anim-accuracy+ :%assimp)
  (export '%assimp::color4d :%assimp)
  (export '%assimp::set-import-property-matrix :%assimp)
  (export '%assimp::d2 :%assimp)
  (export '%assimp::normals :%assimp)
  (export '%assimp::seek-proc :%assimp)
  (export '%assimp::+config-import-fbx-preserve-pivots+ :%assimp)
  (export '%assimp::+true+ :%assimp)
  (export '%assimp::texture-op :%assimp)
  (export '%assimp::transform-vec-by-matrix3 :%assimp)
  (export '%assimp::+config-pp-db-threshold+ :%assimp)
  (export '%assimp::+color4d-h-inc+ :%assimp)
  (export '%assimp::+%ai-matkey-texmap-axis-base+ :%assimp)
  (export '%assimp::num-faces :%assimp)
  (export '%assimp::+force-inline+ :%assimp)
  (export '%assimp::+matrix3x3-h-inc+ :%assimp)
  (export '%assimp::+config-pp-sbp-remove+ :%assimp)
  (export '%assimp::+matkey-name+ :%assimp)
  (export '%assimp::rotation-keys :%assimp)
  (export '%assimp::origin :%assimp)
  (export '%assimp::+config-import-md3-handle-multipart+ :%assimp)
  (export '%assimp::num-meshes :%assimp)
  (export '%assimp::+mesh-h-inc+ :%assimp)
  (export '%assimp::+matkey-enable-wireframe+ :%assimp)
  (export '%assimp::+matkey-shader-primitive+ :%assimp)
  (export '%assimp::+success+ :%assimp)
  (export '%assimp::b :%assimp)
  (export '%assimp::camera :%assimp)
  (export '%assimp::+anim-h-inc+ :%assimp)
  (export '%assimp::mesh-channels :%assimp)
  (export '%assimp::+postprocess-h-inc+ :%assimp)
  (export '%assimp::total :%assimp)
  (export '%assimp::+config-export-point-clouds+ :%assimp)
  (export '%assimp::+config-import-global-keyframe+ :%assimp)
  (export '%assimp::+scene-flags-terrain+ :%assimp)
  (export '%assimp::materials :%assimp)
  (export '%assimp::morphing-method :%assimp)
  (export '%assimp::color3d :%assimp)
  (export '%assimp::num-materials :%assimp)
  (export '%assimp::+outofmemory+ :%assimp)
  (export '%assimp::+%ai-matkey-texblend-base+ :%assimp)
  (export '%assimp::file-flush-proc :%assimp)
  (export '%assimp::matrix3x3 :%assimp)
  (export '%assimp::file-size-proc :%assimp)
  (export '%assimp::importer-flags :%assimp)
  (export '%assimp::min :%assimp)
  (export '%assimp::up :%assimp)
  (export '%assimp::+config-import-ifc-cylindrical-tessellation+
          :%assimp)
  (export '%assimp::+config-import-ifc-custom-triangulation+
          :%assimp)
  (export '%assimp::+max-bone-weights+ :%assimp)
  (export '%assimp::+config-import-ac-eval-subdivision+ :%assimp)
  (export '%assimp::morph-mesh-channels :%assimp)
  (export '%assimp::+slm-default-max-triangles+ :%assimp)
  (export '%assimp::material :%assimp)
  (export '%assimp::vector3d :%assimp)
  (export '%assimp::min-minor :%assimp)
  (export '%assimp::string :%assimp)
  (export '%assimp::num-anim-meshes :%assimp)
  (export '%assimp::num-channels :%assimp)
  (export '%assimp::get-extension-list :%assimp)
  (export '%assimp::clip-plane-near :%assimp)
  (export '%assimp::vertex-id :%assimp)
  (export '%assimp::scaling :%assimp)
  (export '%assimp::+matkey-color-emissive+ :%assimp)
  (export '%assimp::+material-h-inc+ :%assimp)
  (export '%assimp::mesh-key :%assimp)
  (export '%assimp::get-material-texture :%assimp)
  (export '%assimp::light :%assimp)
  (export '%assimp::file-tell-proc :%assimp)
  (export '%assimp::attenuation-linear :%assimp)
  (export '%assimp::pos :%assimp)
  (export '%assimp::method :%assimp)
  (export '%assimp::pre-state :%assimp)
  (export '%assimp::translation :%assimp)
  (export '%assimp::c4 :%assimp)
  (export '%assimp::texel :%assimp)
  (export '%assimp::+assimp-ai-real-text-precision+ :%assimp)
  (export '%assimp::+vector2d-h-inc+ :%assimp)
  (export '%assimp::a3 :%assimp)
  (export '%assimp::children :%assimp)
  (export '%assimp::angle-inner-cone :%assimp)
  (export '%assimp::face :%assimp)
  (export '%assimp::size :%assimp)
  (export '%assimp::height :%assimp)
  (export '%assimp::user-data :%assimp)
  (export '%assimp::g :%assimp)
  (export '%assimp::mesh-morph-anim :%assimp)
  (export '%assimp::+config-import-collada-ignore-up-direction+
          :%assimp)
  (export '%assimp::+config-import-lwo-one-layer-only+ :%assimp)
  (export '%assimp::position-keys :%assimp)
  (export '%assimp::ray :%assimp)
  (export '%assimp::+config-import-md2-keyframe+ :%assimp)
  (export '%assimp::+config-import-mdl-colormap+ :%assimp)
  (export '%assimp::+matkey-shader-fragment+ :%assimp)
  (export '%assimp::mesh-morph-key :%assimp)
  (export '%assimp::num-mesh-channels :%assimp)
  (export '%assimp::+config-pp-ct-max-smoothing-angle+ :%assimp)
  (export '%assimp::+matkey-blend-func+ :%assimp)
  (export '%assimp::+config-pp-rrm-exclude-list+ :%assimp)
  (export '%assimp::material-property :%assimp)
  (export '%assimp::c :%assimp)
  (export '%assimp::get-material-string :%assimp)
  (export '%assimp::get-import-format-count :%assimp)
  (export '%assimp::private :%assimp)
  (export '%assimp::node-anim :%assimp)
  (export '%assimp::value :%assimp)
  (export '%assimp::release-property-store :%assimp)
  (export '%assimp::+config-pp-ptv-add-root-transformation+ :%assimp)
  (export '%assimp::+config-android-jni-assimp-manager-support+
          :%assimp)
  (export '%assimp::+scene-flags-allow-shared+ :%assimp)
  (export '%assimp::get-material-property :%assimp)
  (export '%assimp::animations :%assimp)
  (export '%assimp::nodes :%assimp)
  (export '%assimp::d4 :%assimp)
  (export '%assimp::texture-map-mode :%assimp)
  (export '%assimp::+matrix4x4-h-inc+ :%assimp)
  (export '%assimp::+config-import-smd-keyframe+ :%assimp)
  (export '%assimp::+import-ifc-default-smoothing-angle+ :%assimp)
  (export '%assimp::+%ai-matkey-texflags-base+ :%assimp)
  (export '%assimp::plane :%assimp)
  (export '%assimp::data-length :%assimp)
  (export '%assimp::aspect :%assimp)
  (export '%assimp::+scene-flags-incomplete+ :%assimp)
  (export '%assimp::maintainer :%assimp)
  (export '%assimp::set-import-property-string :%assimp)
  (export '%assimp::identity-matrix3 :%assimp)
  (export '%assimp::+importer-desc-h-inc+ :%assimp)
  (export '%assimp::color-specular :%assimp)
  (export '%assimp::num-cameras :%assimp)
  (export '%assimp::file-io :%assimp)
  (export '%assimp::+%ai-matkey-uvwsrc-base+ :%assimp)
  (export '%assimp::detach-all-log-streams :%assimp)
  (export '%assimp::node :%assimp)
  (export '%assimp::+config-import-ase-reconstruct-normals+ :%assimp)
  (export '%assimp::+uvtrafo-rotation+ :%assimp))

(defun %assimp::initialize-claw-library-aw-assimp ()
  (unless (zerop (cffi:foreign-funcall
                   "__claw_aw_assimp_loader_5DA53F6A98A30162A8623B6E17B80A948CCD1B41"
                   :int))
    (error "Failed to initialize adapater")))

